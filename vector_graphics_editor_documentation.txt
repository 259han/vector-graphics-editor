# 向量图形编辑器技术文档
版本：2.0
作者：XXX
最后修改日期：2025-04-12
维护者：XXX团队

更新说明：
- 增加了统一的文档结构说明，方便新成员快速了解系统整体架构。
- 在各模块末尾增加了变更记录区域。
- 增强了接口说明和输入输出参数说明，以便后续扩展和升级。

--------------------------------------------------

目录
1. 系统简介
2. 系统架构
   2.1 核心层 (Core)
   2.2 命令层 (Command)
   2.3 状态层 (State)
   2.4 UI层 (UI)
   2.5 工具层 (Utils)
3. 功能流程
4. 性能优化策略
5. 扩展性设计
6. 错误处理与日志
7. 文件格式支持
8. 版本历史与扩展建议

--------------------------------------------------

1. 系统简介

向量图形编辑器是一款基于Qt框架的图形设计软件，主要用于创建、编辑、管理各种矢量图形。设计理念是高内聚低耦合，各模块之间通过明确定义的接口进行交互，确保后期功能扩展和维护工作方便、稳定。

--------------------------------------------------

2. 系统架构

系统采用分层设计，下面详细说明各层职责以及关键接口的设计和扩展注意事项。

2.1 核心层 (Core)

负责图形数据结构和基本绘制操作。所有图形类型均由 Graphic 抽象类派生而来，统一管理属性和行为。

2.1.1 Graphic 类及其数据结构

- 图形类型枚举
  enum GraphicType {
      NONE = 0,       // 未指定
      LINE = 1,       // 直线
      RECTANGLE = 2,  // 矩形
      ELLIPSE = 3,    // 椭圆
      CIRCLE = 4,     // 圆形
      BEZIER = 5,     // Bezier曲线
      TRIANGLE = 6,   // 三角形
      FILL = 7,       // 填充
      CONNECTION = 8  // 连接线
  };

- 核心方法说明：
  - draw(QPainter& painter)：负责图形绘制，参数说明及其依赖的子类需要在接口文档中详细记录。
  - 变换方法：move()、rotate()、scale()、mirror() 等均应注明支持的参数及异常情况。
  - 属性访问方法：如 getCenter()、getType() 等，要在注释中描述返回值及可能的边界情况。
  - 对于样式设置和图层管理，以及连接点、碰撞检测等方法，建议统一记录业务逻辑及修改历史，便于后续扩展。

【变更记录】：
- 2025-04-12：增加了详细的接口参数说明和异常返回说明。

2.1.2 GraphicItem 类

作为 QGraphicsItem 的子类，实现了图形在场景中的显示，并提供控制点交互。

- 控制点枚举说明
  enum ControlHandle {
      None,
      TopLeft,
      TopCenter,
      TopRight,
      MiddleLeft,
      MiddleRight,
      BottomLeft,
      BottomCenter,
      BottomRight,
      Rotation
  };

- 主要接口：
  - boundingRect()、paint()：说明绘制区域和算法选择。
  - moveBy()、rotateBy()、scaleBy()、mirror() 等方法的参数和操作效果。
  - 支持数据绑定：itemData() 和 setItemData()，便于与外部数据交互。

【变更记录】：
- 2025-04-12：统一了控制点的枚举命名，增加了接口使用说明。

2.1.3 DrawStrategy 类

采用策略模式实现不同图形的绘制算法。建议将每个具体策略单独放入文件中，并提供相应的单元测试。

- 基类接口：
  class DrawStrategy {
  public:
      virtual void draw(QPainter* painter, const std::vector<QPointF>& points) = 0;
      virtual void setColor(const QColor& color) = 0;
      virtual void setLineWidth(int width) = 0;
  };

- 具体策略：
  - LineDrawStrategy
  - RectangleDrawStrategy
  - CircleDrawStrategy
  - EllipseDrawStrategy
  - BezierDrawStrategy

【维护建议】：
- 每个策略类应增加详细的注释，说明所采用算法的核心思路及性能指标。
- 后续如增加新图形类型时，要求实现对应策略后，及时更新工厂类及接口说明。

2.1.4 SelectionManager 类

负责图形的选择操作、状态更新和区域选择算法。

- 选择模式枚举
  enum SelectionMode {
      SingleSelection,
      MultiSelection,
      RectSelection,
  };

- 接口说明：
  - 选择操作：startSelection()、updateSelection()、finishSelection()、clearSelection()
  - 查询接口：getSelectionRect()、getSelectionPath()、isSelectionValid()、contains()
  - 变换接口：moveSelection()、scaleSelection()

【备注】：
- 可考虑设计"监听器"机制，使UI层能实时感知选择状态的变化，便于扩展。

2.1.5 GraphicsItemFactory 类

利用工厂模式集中创建图形项。后续添加新图形项只需扩展该类实现。

- 接口原型：
  class GraphicsItemFactory {
  public:
      virtual QGraphicsItem* createItem(Graphic::GraphicType type, const QPointF& position) = 0;
      virtual QGraphicsItem* createCustomItem(Graphic::GraphicType type, const std::vector<QPointF>& points) = 0;
  };

【扩展说明】：
- 每次扩展图形类型时，在文档中同步更新此处接口说明和使用示例。

--------------------------------------------------

2.2 命令层 (Command)

利用命令模式实现操作的可撤销和重做，核心接口和实现均按统一风格书写。

2.2.1 Command 接口

- 接口定义：
  class Command {
  public:
      virtual void execute() = 0;
      virtual void undo() = 0;
      virtual QString getDescription() const = 0;
      virtual QString getType() const = 0;
  };

- 说明：
  - 所有具体命令应继承此接口，并在接口文档中说明执行、撤销时各个阶段的状态转换。
  - 建议每个命令类增加单元测试，并提供详细的异常处理说明。

【更新说明】：
- 2025-04-12：增加了撤销重做的执行过程说明和界面更新机制。

2.2.2 CommandManager 类

单例模式实现，全局管理命令栈，接口包括执行、撤销、重做及分组操作。

- 核心方法：
  - executeCommand(Command* command)
  - undo()、redo()
  - 分组操作如 beginCommandGroup()、endCommandGroup() 等

- 扩展建议：
  - 在实现中添加命令日志记录，便于追踪操作历史。
  - 更新文档时同步更新各信号（如 commandExecuted 等）的触发场景和用法说明。

2.2.3 具体命令类

如 CreateGraphicCommand、TransformCommand、SelectionCommand 等，每个命令需要详细说明输入参数及其业务意义。

【维护提示】：
- 随着新命令的增加，建议建立统一模板和接口文档，并保持代码注释与文档的一致性。

--------------------------------------------------

2.3 状态层 (State)

采用状态设计模式处理编辑器的各种工作状态。

2.3.1 EditorState 类

- 状态类型枚举：
  enum StateType {
      BaseState,
      DrawState,
      EditState,
      FillState
  };

- 事件处理接口：
  - 鼠标和键盘事件处理：mousePressEvent()、keyPressEvent() 等
  - 状态切换接口：onEnterState()、onExitState()

【扩展建议】：
- 建议在每个状态类中增加调试日志及状态切换注释，便于后续定位问题。

2.3.2 具体状态类

- DrawState、EditState、FillState 等，每个状态应有单独的小节说明其核心职责、输入输出和注意事项。

--------------------------------------------------

2.4 UI层 (UI)

UI层负责用户界面的创建和事件响应设计。

2.4.1 MainWindow 类

- 组件组成：工具栏、菜单、状态栏、绘图区域。
- 事件槽函数：对各菜单及操作的响应函数进行详细描述，并标明输入、输出及可能的异常处理。

【维护建议】：
- 建议提供UI组件之间的通信图谱，并每次更新UI组件时同步修改文档说明。

2.4.2 DrawArea 类

- 主要功能：状态管理、图形操作、剪贴板操作、视图控制。
- 接口详细说明：
  - 普通绘图、剪贴板操作（复制、剪切、粘贴）、智能粘贴的处理逻辑
  - 鼠标、键盘事件响应及优先级说明

2.4.3 ImageResizer 类

- 控制点说明：
  enum Handle {
      TopLeft = 0, Top, TopRight,
      Right, BottomRight, Bottom,
      BottomLeft, Left,
      Rotate = 8 // 旋转控制点
  };
- 接口说明：包括事件处理、控制点更新、光标选择及旋转、缩放操作说明。

--------------------------------------------------

2.5 工具层 (Utils)

提供公共功能，如日志、性能监控和常用工具方法。

2.5.1 Logger 类

- 日志级别与接口：详列各级别（Debug、Info、Warning、Error、Fatal）的处理逻辑，并增加配置更新方法。
- 维护建议：
  - 日志格式和日志轮转策略应与团队文档统一，后续有新要求时在此处同步更新。

2.5.2 PerformanceMonitor 类

- 性能监控数据：介绍如何计算帧率、内存和CPU使用率，并对调用过程进行记录。
- 图表绘制：采用折线图、柱状图、面积图和点状图四种可切换的图表方式展示性能数据。
- 主要接口：
  ```cpp
  // 控制接口
  void setEnabled(bool enabled);                   // 启用/禁用性能监控
  void setOverlayEnabled(bool enable);            // 启用/禁用覆盖层显示
  void startMeasure(MetricType type);             // 开始测量指定指标
  void endMeasure(MetricType type);               // 结束测量指定指标
  void frameCompleted();                          // 通知帧完成
  
  // 显示控制
  void setChartDisplayMode(ChartDisplayMode mode);// 设置图表显示模式
  void setOverlayPosition(OverlayPosition position);// 设置覆盖层位置
  void setSamplesCount(int samplesCount);         // 设置样本数量
  
  // 绘制方法
  void renderOverlay(QPainter* painter, const QRectF& rect);// 绘制覆盖层
  ```

【已知问题及修复】：
- 图表绘制错误：当数据较少或数值接近零时，图表会从左上角为起点绘制，导致显示异常。修复方法为调整路径构建逻辑，确保绘制点的起始位置正确。
- 帧率显示过低：系统监测到帧率显示值与实际不符，可能是由于计算方法不准确导致。修复方法是优化帧率计算逻辑，确保正确捕获所有帧事件。

【后续扩展】：
- 计划增加时间区间选择功能，允许用户查看特定时间段的性能数据。
- 计划增加图表导出功能，支持将性能数据导出为CSV或PNG格式。
- 建议增加更多操作指标，并在文档中细致描述每个指标的计算方法和优化目标。

2.5.3 GraphicsUtils 类

提供图形通用函数，包括坐标转换和几何计算。

--------------------------------------------------

3. 功能流程

每个主要功能（绘图、选择、图像调整、撤销/重做、剪贴板操作）的流程均以步骤分解说明，建议每一步骤后附上示例代码和状态图。

例如：
3.1 绘图功能流程
1. 用户选择绘图工具 → UI调用 setDrawState()
2. DrawState 创建并管理当前图形生成
3. 创建 CreateGraphicCommand 并加入命令栈
4. 更新场景显示并发送状态信号

【更新记录】：每次UI逻辑更新时在此处更新流程图说明。

--------------------------------------------------

4. 性能优化策略

4.1 渲染优化
- 切换高低质量渲染模式；采用局部重绘策略；图形缓存管理

4.2 内存管理
- 资源共享，采用智能指针及引用计数机制

4.3 响应优化
- 节流、防抖机制以及异步处理

【扩展建议】：
- 后续增加GPU加速及多线程渲染时在此处更新说明和注意事项。

--------------------------------------------------

5. 扩展性设计

5.1 新图形类型扩展
详细说明如何在 GraphicType 枚举中添加新类型、实现新策略、更新工厂方法以及对应测试用例的编写方法。

5.2 新工具及插件扩展
说明如何扩展工具条和插件接口，包含插件加载机制和API文档说明。

--------------------------------------------------

6. 错误处理与日志

- 异常捕获策略：关键操作使用 try-catch 块，并保证基础功能不受影响。
- 日志记录机制：记录完整上下文，便于故障调试，定期轮转日志文件。

【维护建议】：
- 每次新增错误处理逻辑时，在文档中增加异常示例和处理策略说明。

--------------------------------------------------

7. 文件格式支持

详细介绍了系统所支持的文件格式（如自定义CVG格式与SVG），包括序列化、反序列化和扩展区域（预留版本扩展）的设计。重点说明如何保证向后兼容性及文件扩展功能。

7.1 FileFormatManager 说明
- 提供完整接口，包含保存、加载、SVG导出等。
- 详细的文件结构说明，例如文件头、场景信息和图形项数据的序列化格式。

7.2 DrawArea 文件操作
- 支持多种文件格式的保存和打开操作，且记录用户操作日志和性能指标。

【扩展建议】：
- 对于新添加的文件格式扩展或导出选项，需要在此区域中详细记录文件头结构及兼容性检测方法。

--------------------------------------------------

8. 版本历史与扩展建议

本章节记录文档和代码的版本更新记录以及后续扩展思路，确保所有修改都有记录，方便追踪和回滚。

版本历史示例：
- v2.0 (2025-04-12)
  - 完整重构文档结构
  - 增加详细接口说明和参数注释
  - 扩展UI和错误处理文档
- v1.0 (2024-xx-xx)
  - 初始版本，基本功能说明

后续扩展建议：
- 引入统一的文档生成工具（如Doxygen），自动生成API文档。
- 制定文档维护规范和代码注释准则，确保文档与代码的一致性。

